
local file = fs.open("jahat", "r")
local data = file.readAll()
file.close()
facing = math.abs(data)

rednet.open("left")

slaveNum = 2

knownBlocks = {}
ores = {}
titi = {}
panir = {
    up = false
,   down = false
,   right = false
,   left = false
,   forward = false
,   back = false
}
checked = {
    left = false
,   right = false
,   back = false
}

function facee(input)
    if facing ~= input then
        local turning = facing - input
        if turning < 0 then
            if math.abs(turning) == 3 then
                left()
            else
                for i = 1, math.abs(turning) do
                    right()
                end
            end
        elseif turning > 0 then
            if math.abs(turning) == 3 then
                right()
            else
                for i = 1, math.abs(turning) do
                    left()
                end
            end
        end
    end
end

function saveloc()
    savedLoc = vector.new(gps.locate())
end

function up(input)
    for i = 1, input do
        if turtle.inspectUp() ~= false then
            turtle.digUp()
            turtle.up()
            removeFromList()
        elseif turtle.inspectUp() == false then
            turtle.up()
            removeFromList()
        end
    end
end

function upM(input)
    for i = 1, input do
        if turtle.inspectUp() ~= false then
            turtle.digUp()
            turtle.up()
            scan3()
            removeFromList()
        elseif turtle.inspectUp() == false then
            turtle.up()
            scan3()
            removeFromList()
        end
    end
end

function down(input)
    for i = 1, input do
        if turtle.inspectDown() ~= false then
            turtle.digDown()
            turtle.down()
            removeFromList()
        elseif turtle.inspectDown() == false then
            turtle.down()
            removeFromList()
        end
    end
end

function downM(input)
    for i = 1, input do
        if turtle.inspectDown() ~= false then
            turtle.digDown()
            turtle.down()
            scan3()
            removeFromList()
        elseif turtle.inspectDown() == false then
            turtle.down()
            scan3()
            removeFromList()
        end
    end
end

function left()
    turtle.turnLeft()
    if facing == 1 then
        facing = 4
    else
        facing = facing - 1
    end
    local file = fs.open("jahat", "w")
    file.write(facing)
    file.close()
end

function right()
    turtle.turnRight()
    if facing == 4 then
        facing = 1
    else
        facing = facing + 1
    end
    local file = fs.open("jahat", "w")
    file.write(facing)
    file.close()
end

function fullTurn()
    turtle.turnRight()
    turtle.turnRight()
    if facing == 1 then
        facing = 3
    elseif facing == 2 then
        facing = 4
    elseif facing == 3 then
        facing = 1
    elseif facing == 4 then
        facing = 2
    end
end

function CurrentLoc()
    local x,y,z = gps.locate()
    local loc = vector.new(x, y, z)
    return loc
end

function match(vectorr, table)
    if table == "knownBlocks" then
        if #knownBlocks ~= 0 then
            for k, v in pairs(knownBlocks) do
                local thing = vectorr:sub(v)
                if thing:length() == 0 then
                    return true 
                end
            end
        else return false end
    elseif table == "ores" then
        if #ores ~= 0 then
            for k, v in pairs(ores) do
                local thing = vectorr:sub(v)
                if thing:length() == 0 then
                    return true 
                end
            end
        else return false end
    end
end

function isOre(direction)
    if #ores ~= 0 then
        local x = CurrentLoc().x
        local z = CurrentLoc().z
        local y = CurrentLoc().y
        if direction == "right" then
            if facing == 1 then x = x + 1
            elseif facing == 2 then z = z + 1
            elseif facing == 3 then x = x - 1
            elseif facing == 4 then z = z - 1 end
        elseif direction == "left" then
            if facing == 1 then x = x - 1
            elseif facing == 2 then z = z - 1
            elseif facing == 3 then x = x + 1
            elseif facing == 4 then z = z + 1 end
        elseif direction == "back" then
            if facing == 1 then z = z + 1
            elseif facing == 2 then x = x - 1
            elseif facing == 3 then z = z - 1
            elseif facing == 4 then x = x + 1 end
        end
        local block = vector.new(x, y, z)
        for k, v in pairs(ores) do
            local pp = v:sub(block)
            if pp:length() == 0 then return true end
        end
    else return false end
end

function isKnown(direction)
    if #knownBlocks ~= 0 then
        local x = CurrentLoc().x
        local z = CurrentLoc().z
        local y = CurrentLoc().y
        if direction == "right" then
            if facing == 1 then x = x + 1
            elseif facing == 2 then z = z + 1
            elseif facing == 3 then x = x - 1
            elseif facing == 4 then z = z - 1 end
        elseif direction == "left" then
            if facing == 1 then x = x - 1
            elseif facing == 2 then z = z - 1
            elseif facing == 3 then x = x + 1
            elseif facing == 4 then z = z + 1 end
        elseif direction == "back" then
            if facing == 1 then z = z + 1
            elseif facing == 2 then x = x - 1
            elseif facing == 3 then z = z - 1
            elseif facing == 4 then x = x + 1 end
        end
        local block = vector.new(x, y, z)
        for k, v in pairs(knownBlocks) do
            local pp = v:sub(block)
            if pp:length() == 0 then return true end
        end
    else return false end
end

function move(vector)
    local a = CurrentLoc()
    local b = vector
    local c = b:sub(a)
    while c:length() ~= 0 do
        if facing == 1 then
            if c.z < 0 then
                forward(math.abs(c.z))
            elseif c.y > 0 then
                up(math.abs(c.y))
            elseif c.y < 0 then
                down(math.abs(c.y))
            elseif c.x > 0 then
                right()
                forward(math.abs(c.x))
            elseif c.x < 0 then
                left()
                forward(math.abs(c.x))
            elseif c.z > 0 then
                fullTurn()
                forward(math.abs(c.z))
            end
        elseif facing == 2 then
            if c.x > 0 then
                forward(math.abs(c.x))
            elseif c.y > 0 then
                up(math.abs(c.y))
            elseif c.y < 0 then
                down(math.abs(c.y))
            elseif c.z > 0 then
                right()
                forward(math.abs(c.z))
            elseif c.z < 0 then
                left()
                forward(math.abs(c.z))
            elseif c.x < 0 then
                fullTurn()
                forward(math.abs(c.x))
            end
        elseif facing == 3 then
            if c.z > 0 then
                forward(math.abs(c.z))
            elseif c.y > 0 then
                up(math.abs(c.y))
            elseif c.y < 0 then
                down(math.abs(c.y))
            elseif c.x < 0 then
                right()
                forward(math.abs(c.x))
            elseif c.x > 0 then
                left()
                forward(math.abs(c.x))
            elseif c.z < 0 then
                fullTurn()
                forward(math.abs(c.z))
            end
        elseif facing == 4 then
            if c.x < 0 then
                forward(math.abs(c.x))
            elseif c.y > 0 then
                up(math.abs(c.y))
            elseif c.y < 0 then
                down(math.abs(c.y))
            elseif c.z < 0 then
                right()
                forward(math.abs(c.z))
            elseif c.z > 0 then
                left()
                forward(math.abs(c.z))
            elseif c.x > 0 then
                fullTurn()
                forward(math.abs(c.x))
            end
        end
        a = CurrentLoc()
        c = b:sub(a)
    end
end

function moveM(vector)
    local a = CurrentLoc()
    local b = vector
    local c = b:sub(a)
    while c:length() ~= 0 do
        if facing == 1 then
            if c.z < 0 then
                forwardM(math.abs(c.z))
            elseif c.y > 0 then
                upM(math.abs(c.y))
            elseif c.y < 0 then
                downM(math.abs(c.y))
            elseif c.x > 0 then
                right()
                forwardM(math.abs(c.x))
            elseif c.x < 0 then
                left()
                forwardM(math.abs(c.x))
            elseif c.z > 0 then
                fullTurn()
                forwardM(math.abs(c.z))
            end
        elseif facing == 2 then
            if c.x > 0 then
                forwardM(math.abs(c.x))
            elseif c.y > 0 then
                upM(math.abs(c.y))
            elseif c.y < 0 then
                downM(math.abs(c.y))
            elseif c.z > 0 then
                right()
                forwardM(math.abs(c.z))
            elseif c.z < 0 then
                left()
                forwardM(math.abs(c.z))
            elseif c.x < 0 then
                fullTurn()
                forwardM(math.abs(c.x))
            end
        elseif facing == 3 then
            if c.z > 0 then
                forwardM(math.abs(c.z))
            elseif c.y > 0 then
                upM(math.abs(c.y))
            elseif c.y < 0 then
                downM(math.abs(c.y))
            elseif c.x < 0 then
                right()
                forwardM(math.abs(c.x))
            elseif c.x > 0 then
                left()
                forwardM(math.abs(c.x))
            elseif c.z < 0 then
                fullTurn()
                forwardM(math.abs(c.z))
            end
        elseif facing == 4 then
            if c.x < 0 then
                forwardM(math.abs(c.x))
            elseif c.y > 0 then
                upM(math.abs(c.y))
            elseif c.y < 0 then
                downM(math.abs(c.y))
            elseif c.z < 0 then
                right()
                forwardM(math.abs(c.z))
            elseif c.z > 0 then
                left()
                forwardM(math.abs(c.z))
            elseif c.x > 0 then
                fullTurn()
                forwardM(math.abs(c.x))
            end
        end
        a = CurrentLoc()
        c = b:sub(a)
    end
end

function list(table, direction)
    local x = CurrentLoc().x
    local z = CurrentLoc().z
    local y = CurrentLoc().y
    if direction == "up" then y = y + 1
    elseif direction == "down" then  y = y - 1
    elseif direction == "forward" then
        if facing == 1 then z = z - 1
        elseif facing == 2 then x = x + 1
        elseif facing == 3 then z = z + 1
        elseif facing == 4 then x = x - 1 end
    end
    local block = vector.new(x, y, z)
    if table == "ores" then
        if match(block, "ores") ~= true then
            ores[#ores+1] = block
        end
    elseif table == "knownBlocks" then
        if match(block, "knownBlocks") ~= true then
            knownBlocks[#knownBlocks+1] = block
        end
    end
end 

function check(direction, checked)
    list("knownBlocks", direction)
    if direction == "up" then
        if turtle.detectUp() == true then
            local _, f = turtle.inspectUp()
            if f.tags["forge:ores"] == true then
                list("ores", direction)
                panir.up = true
                return true
            end
        end
    elseif direction == "down" then
        if turtle.detectDown() == true then
            local _, f = turtle.inspectDown()
            if f.tags["forge:ores"] == true then
                list("ores", direction)
                panir.down = true
                return true
            end
        end
    elseif direction == "forward" then
        if turtle.detect() == true then
            local _, f = turtle.inspect()
            if f.tags["forge:ores"] == true then
                list("ores", direction)
                if checked == "none" then
                    panir.forward = true
                elseif checked == "left" then
                    panir.left = true
                elseif checked == "right" then
                    panir.right = true
                elseif checked == "back" then
                    panir.back = true
                end
                return true
            end
        end
    end
end

function forward(input)
    for i = 1, input do
        if turtle.detect() == true then
            turtle.dig()
            turtle.forward()
            removeFromList()
        elseif turtle.detect() == false then
            turtle.forward()
            removeFromList()
        end
    end
end

function forwardM(input)
    for i = 1, input do
        if turtle.detect() == true then
            turtle.dig()
            turtle.forward()
            scan3()
            removeFromList()
        elseif turtle.detect() == false then
            turtle.forward()
            scan3()
            removeFromList()
        end
    end
end

function removeFromList()
    if #ores ~= 0 then
        for k, v in pairs(ores) do
            local pand = CurrentLoc():sub(v)
            if pand:length() == 0 then
                table.remove(ores, k)
            end
        end
    end
end

function checkClose()
    for k, v in pairs(ores) do
        local tedadN = v:sub(CurrentLoc())
        local tedad = math.abs(tedadN.x) + math.abs(tedadN.y) + math.abs(tedadN.z)
        if k == 1 then
            oot = tedad
            out = k
        elseif k ~= 1 then
            if tedad < oot then
                oot = tedad
                out = k
            end
        end
    end
    return out
end

function scan()

    face = 1

    panir = {
        up = false
    ,   down = false
    ,   right = false
    ,   left = false
    ,   forward = false
    ,   back = false
    }
    local checked = {
        left = false
    ,   right = false
    ,   back = false
    }

    check("up")
    check("down")
    check("forward", "none")

    if isKnown("right") then
        if isOre("right") then
            panir.right = true
        end
    else
        right()
        face = 2
        check("forward", "right")
        checked.right = true
    end

    if checked.right == true then
        if isKnown("right") then
            if isOre("right") then
                panir.back = true
            end
        else
            right()
            face = 3
            check("forward", "back")
            checked.back = true
        end
    else
        if isKnown("back") then
            if isOre("back") then
                panir.back = true
            end
        else
            fullTurn()
            face = 3
            check("forward", "back")
            checked.back = true
        end
    end

    if checked.back == true then
        if isKnown("right") then
            if isOre("right") then
                panir.left = true
            end
        else
            right()
            face = 4
            check("forward", "left")
            checked.left = true
        end
    elseif checked.right == true then
        if isKnown("back") then
            if isOre("back") then
                panir.left = true
            end
        else
            fullTurn()
            face = 4
            check("forward", "left")
            checked.left = true
        end
    else
        if isKnown("left") then
            if isOre("left") then
                panir.left = true
            end
        else
            left()
            face = 4
            check("forward", "left")
            checked.left = true
        end
    end
    if panir.back or panir.down or panir.forward or panir.left or panir. right or panir.up == true then return true else return false end
end

function scan3()
    check("forward", "none")
    check("up")
    check("down")
end

function scan2()
    if check("forward", "none") == true then return true end
    if check("up") == true then return true end
    if check("down") == true then return true end
    right()
    if check("forward", "right") == true then left() return true end
    fullTurn()
    if check("forward", "left") == true then right() return true end
    right()
    return false
end

function thing()
    if scan() == true then
        if face == 1 then
            if panir.forward == true then forward(1) return true
            elseif panir.up == true then up(1) return true
            elseif panir.down == true then down(1) return true
            elseif panir.right == true then right() forward(1) return true
            elseif panir.left == true then left() forward(1) return true
            elseif panir.back == true then fullTurn() forward(1) return true end
        elseif face == 2 then
            if panir.right == true then forward(1) return true
            elseif panir.up == true then up(1) return true
            elseif panir.down == true then down(1) return true
            elseif panir.forward == true then left() forward(1) return true
            elseif panir.back == true then right() forward(1) return true
            elseif panir.left == true then fullTurn() forward(1) return true end
        elseif face == 3 then
            if panir.back == true then forward(1) return true
            elseif panir.up == true then up(1) return true
            elseif panir.down == true then down(1) return true
            elseif panir.right == true then left() forward(1) return true
            elseif panir.left == true then right() forward(1) return true
            elseif panir.forward == true then fullTurn() forward(1) return true end
        elseif face == 4 then
            if panir.left == true then forward(1) return true
            elseif panir.up == true then up(1) return true
            elseif panir.down == true then down(1) return true
            elseif panir.forward == true then right() forward(1) return true
            elseif panir.back == true then left() forward(1) return true
            elseif panir.right == true then fullTurn() forward(1) return true end
        end
    else return false end
end

function veinMine()
    knownBlocks = {}
    ores = {}
    saveloc()
    savedFace = facing
    while thing() == true do
        thing()
    end
    while #ores ~= 0 do
        move(ores[checkClose()])
        while thing() == true do
            thing()
        end
    end
    move(savedLoc)
    facee(slaveNum)
end

function mine()
    while true do
        if scan2() == true then
            veinMine()
        else
            if turtle.detectUp() == true then turtle.digUp()
            end
            forward(1)
        end
    end
end

function refuel()
    if turtle.getFuelLevel() < 200 then
        turtle.select(16)
        if turtle.detectUp() == true then
            turtle.digUp()
        end
        turtle.placeUp()
        turtle.suckUp(32)
        turtle.refuel(32)
        turtle.digUp()
        turtle.transferTo(16)
    end
end

function dump()
    refuel()
    turtle.select(16)
    if turtle.detectUp() == true then
        turtle.digUp()
    end
    turtle.placeUp()        
    for i = 1, 14 do
        turtle.select(i)
        turtle.dropUp(turtle.getItemCount(i))
    end
    turtle.digUp()
    turtle.transferTo(16)
end

function debunk()
    for c,k in pairs(titi) do
        local x = k.x
        local y = k.y
        local z = k.z
        ores[#ores+1] = vector.new(x,y,z)
    end
    titi = {}
end

function search()
    dump()
    if turtle.detect() == true then
        turtle.dig()
    end
    turtle.select(15)
    turtle.place()
    local event, sender, message, protocol = os.pullEvent("rednet_message")
    if message == "fuel_needed" then
        turtle.select(16)
        if turtle.detectUp() == true then
            turtle.digUp()
        end
        turtle.placeUp()
        turtle.suckUp(32)
        turtle.drop(32)
        rednet.send(2,"refuel")
        turtle.digUp()
        turtle.transferTo(16)
        local event, sender, message, protocol = os.pullEvent("rednet_message")
        titi = message
    else
        titi = message
    end
    turtle.select(15)
    forward(1)
    debunk()
end

function deez()
    local jah = facing
    local pp = CurrentLoc()
    search()
    while #ores ~= 0 do
        move(ores[checkClose()])
    end
    move(pp)
    facee(jah)
end
